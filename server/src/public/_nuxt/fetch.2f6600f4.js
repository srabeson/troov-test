import{p as z,r as C,q as P,s as A,x as k,y as B,u as O,z as E,A as F,B as M}from"./entry.e6195af8.js";const H=()=>null;function R(...i){var h,m,_,v,D,w,d,b;const c=typeof i[i.length-1]=="string"?i.pop():void 0;typeof i[0]!="string"&&i.unshift(c);let[t,o,a={}]=i;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof o!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");a.server=(h=a.server)!=null?h:!0,a.default=(m=a.default)!=null?m:H,a.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),a.lazy=(v=(_=a.lazy)!=null?_:a.defer)!=null?v:!1,a.initialCache=(D=a.initialCache)!=null?D:!0,a.immediate=(w=a.immediate)!=null?w:!0;const e=z(),l=()=>(e.isHydrating||a.initialCache)&&e.payload.data[t]!==void 0;e._asyncData[t]||(e._asyncData[t]={data:C(l()?e.payload.data[t]:(b=(d=a.default)==null?void 0:d.call(a))!=null?b:null),pending:C(!l()),error:C(e.payload._errors[t]?P(e.payload._errors[t]):null)});const r={...e._asyncData[t]};r.refresh=r.execute=(s={})=>{if(e._asyncDataPromises[t]){if(s.dedupe===!1)return e._asyncDataPromises[t];e._asyncDataPromises[t].cancelled=!0}if(s._initial&&l())return e.payload.data[t];r.pending.value=!0;const f=new Promise((n,u)=>{try{n(o(e))}catch(g){u(g)}}).then(n=>{if(f.cancelled)return e._asyncDataPromises[t];a.transform&&(n=a.transform(n)),a.pick&&(n=T(n,a.pick)),r.data.value=n,r.error.value=null}).catch(n=>{var u,g;if(f.cancelled)return e._asyncDataPromises[t];r.error.value=n,r.data.value=O((g=(u=a.default)==null?void 0:u.call(a))!=null?g:null)}).finally(()=>{f.cancelled||(r.pending.value=!1,e.payload.data[t]=r.data.value,r.error.value&&(e.payload._errors[t]=P(r.error.value)),delete e._asyncDataPromises[t])});return e._asyncDataPromises[t]=f,e._asyncDataPromises[t]};const y=()=>r.refresh({_initial:!0}),x=a.server!==!1&&e.payload.serverRendered;{const s=E();if(s&&!s._nuxtOnBeforeMountCbs){s._nuxtOnBeforeMountCbs=[];const n=s._nuxtOnBeforeMountCbs;s&&(A(()=>{n.forEach(u=>{u()}),n.splice(0,n.length)}),k(()=>n.splice(0,n.length)))}x&&e.isHydrating&&t in e.payload.data?r.pending.value=!1:s&&(e.payload.serverRendered&&e.isHydrating||a.lazy)&&a.immediate?s._nuxtOnBeforeMountCbs.push(y):a.immediate&&y(),a.watch&&B(a.watch,()=>r.refresh());const f=e.hook("app:data:refresh",n=>{if(!n||n.includes(t))return r.refresh()});s&&k(f)}const p=Promise.resolve(e._asyncDataPromises[t]).then(()=>r);return Object.assign(p,r),p}function T(i,c){const t={};for(const o of c)t[o]=i[o];return t}function q(i,c,t){const[o={},a]=typeof c=="string"?[{},c]:[c,t],e=o.key||a;if(!e||typeof e!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+e);if(!i)throw new Error("[nuxt] [useFetch] request is missing.");const l="$f"+e,r=F(()=>{let n=i;return typeof n=="function"&&(n=n()),O(n)}),{server:y,lazy:x,default:p,transform:h,pick:m,watch:_,initialCache:v,immediate:D,...w}=o,d=M({...w,cache:typeof o.cache=="boolean"?void 0:o.cache}),b={server:y,lazy:x,default:p,transform:h,pick:m,initialCache:v,immediate:D,watch:[d,r,..._||[]]};let s;return R(l,()=>{var n;return(n=s==null?void 0:s.abort)==null||n.call(s),s=typeof AbortController<"u"?new AbortController:{},$fetch(r.value,{signal:s.signal,...d})},b)}export{q as u};
